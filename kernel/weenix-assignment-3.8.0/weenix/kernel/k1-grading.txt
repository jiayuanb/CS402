Guideline for Kernel Assignment 1
=================================

Total points: 100

+---------------------+
| General Guidelines: |
+---------------------+

1)  The points below are maximum points.  Partial credits may be given, if
    appropriate.

2)  Grade what's in the "plus points" section first, then grade the "minus
    points" to deduct points.

3)  Please read the student's README first to see if you need to do something
    different to get their code to work and what the known problems are.  The
    grader must not modify ANY source code and the grader can only grade on a
    32-bit standard Ubuntu 16.04 system.

4)  The scripts below are for csh/tcsh.  If you use bash, please modify them
    where necessary.  Or, you can do "tcsh" and then run the scripts.

5)  The grading is meant to be harsh!  In the "plus points" section, if running
    the "diff" command is suppose to produce no output, but the student's code
    produces some output, most likely, no corresponding plus points will be earned.
    Again, we cannot grade base of "effort".  Similarly, if running the "diff"
    command suppose to produce some output, but the student's code produces no
    output or in the wrong format, most likely, no corresponding plus points will
    be earned.

6)  Unless otherwise specified, the minimum deduction for a mistake of any kind
    is 0.5 pt (unless you have lost all the points allocated for a particular
    test/subtest) even if all are caused by the same programming bug.  If a range
    is specified (e.g., -5 to -10 pts), it means that if such an error occured,
    even just once, the minimum will be deducted.  From that point on, each
    additional occurrence will incur a 0.5 pt deduction.

7)  The posted grading guidelines is not perfect.  We will try our best to stick
    to the grading guidelines.  Sometimes, after we started grading some of the
    submissions, we realize that we missed something (most often in "minus
    points").  The bottomline is that we reserve the right to add or change
    things in the grading guidelines as we see fit (or take additiona deductions
    if you don't follow the spec).  By default, if the spec says that you are
    required to implement something, even though it's not explicitly mentioned in
    the grading guidelines, you must follow the spec.  Please don't assume that
    it's fine not to follow the spec.  If you are not sure about something, it's
    best to send an e-mail to the instructor for clarification.

8)  The grader will grade using a different set of "data" (we will try our best
    not to change the script).  Any numerical value or filename in a commandline
    arguments is also considered "data".  The contents of all test data files
    will also be changed.  Some filenames can also change.  So, you need to make
    sure that your code can handle any input (good and bad).

+--------------+
| Plus points: |
+--------------+

Make sure GDBWAIT=0 and DRIVERS=1 (or DRIVERS=0 if student prefers) in Config.mk.
Must start weenix using "./weenix -n".

(A) KASSERT : +35 points
        Set DRIVERS=1 in Config.mk and invoke kshell from initproc_run().
        Use DBG=error,print,test and CS402TESTS=10 in Config.mk for grading.

        Students need to have the following KASSERT statements in their code and
            at the right places and they need to function correctly (i.e., must
            place "conforming dbg() calls" immediately after the KASSERT statements
            to demonstrate that these KASSERT statements are successfully executed
            in order to get any credit).

        Please note that if one just starts and stops the kernel, some of the
            functions below are NOT invoked.  Therefore, students should use TWO
            back-to-back "conforming dbg() calls" immediately after the
            corresponding KASSERT statements in these functions where the first
            one refers to (A) and the 2nd one refers to a test in section (B-E).

        For a "conforming dbg() calls", you must use the correct format, i.e.,
            dbg(DBG_PRINT, "(GRADING1A X.Y)\n") where X is a number between 1 and 6,
            and Y is a corresponding subtest letter.  If an incorrect format is used,
            the most you can get for each such item is 50% of the allocated points.

    (1) In main/kmain.c:

        (a) In bootstrap():
            (1 pts) (middle) KASSERT(NULL != curproc); /* curproc was uninitialized before, it is initialized here to point to the "idle" process */
            (1 pts) (middle) KASSERT(PID_IDLE == curproc->p_pid); /* make sure the process ID of the created "idle" process is PID_IDLE */
            (1 pts) (middle) KASSERT(NULL != curthr); /* curthr was uninitialized before, it is initialized here to point to the thread of the "idle" process */

        (b) In initproc_create(): /* p is the pointer to the "init" process, thr is the pointer to the thread of p */
            (1 pts) (middle) KASSERT(NULL != p);
            (1 pts) (middle) KASSERT(PID_INIT == p->p_pid);
            (1 pts) (middle) KASSERT(NULL != thr);

    (2) In proc/proc.c:

        (a) In proc_create(): /* pid is the process ID of the process that will be created in this function */
            (2 pts) (middle) KASSERT(PID_IDLE != pid || list_empty(&_proc_list)); /* pid can only be PID_IDLE if this is the first process */
            (2 pts) (middle) KASSERT(PID_INIT != pid || PID_IDLE == curproc->p_pid); /* pid can only be PID_INIT if the running process is the "idle" process */

        (b) In proc_cleanup():
            (1 pts) (precondition) KASSERT(NULL != proc_initproc); /* "init" process must exist and proc_initproc initialized */
            (1 pts) (precondition) KASSERT(1 <= curproc->p_pid); /* this process must not be "idle" process */
            (1 pts) (precondition) KASSERT(NULL != curproc->p_pproc); /* this process must have a parent when this function is entered */
            (2 pts) (postcondition) KASSERT(NULL != curproc->p_pproc); /* this process must still have a parent when this function returns */
            (2 pts) (postcondition) KASSERT(KT_EXITED == curthr->kt_state); /* the thread in this process should be in the KT_EXITED state when this function returns */

        (c) In do_waitpid(): /* p is a dead child process when this function is about to return */
            (2 pts) (postcondition) KASSERT(NULL != p); /* must have found a dead child process */
            (2 pts) (postcondition) KASSERT(-1 == pid || p->p_pid == pid); /* if the pid argument is not -1, then pid must be the process ID of the found dead child process */
            (2 pts) (postcondition) KASSERT(NULL != p->p_pagedir); /* this process should have a valid pagedir before you destroy it */

    (3) In proc/kthread.c:

        (a) In kthread_create():
            (2 pts) (precondition) KASSERT(NULL != p); /* the p argument of this function must be a valid process */

        (b) In kthread_cancel(): /* please use TWO consecutive "conforming dbg() calls" for this since this function is not called if you just start and stop weenix */
            (1 pts) (precondition) KASSERT(NULL != kthr); /* the kthr argument of this function must be a valid thread */

        (c) In kthread_exit():
            (1 pts) (middle) KASSERT(!curthr->kt_wchan); /* curthr should not be (sleeping) in any queue */
            (1 pts) (middle) KASSERT(!curthr->kt_qlink.l_next && !curthr->kt_qlink.l_prev); /* this thread must not be part of any list */
            (1 pts) (middle) KASSERT(curthr->kt_proc == curproc); /* this thread belongs to curproc */

    (4) In proc/sched_helper.c:

        (a) In sched_wakeup_on(): /* thr is the thread to be woken up */
            (1 pts) (middle) KASSERT((thr->kt_state == KT_SLEEP) || (thr->kt_state == KT_SLEEP_CANCELLABLE)); /* thr must be in either one of these two states */

    (5) In proc/sched.c:

        (a) In sched_make_runnable():
            (1 pts) (precondition) KASSERT(&kt_runq != thr->kt_wchan); /* the thr argument must not be a thread that's already in the runq */

    (6) In proc/kmutex.c:

        (a) In kmutex_lock():
            (1 pts) (precondition) KASSERT(curthr && (curthr != mtx->km_holder)); /* curthr must be valid and it must not be holding the mutex (mtx) already */

        (b) In kmutex_lock_cancellable(): /* please use TWO consecutive "conforming dbg() calls" for this since this function is not called if you just start and stop weenix */
            (1 pts) (precondition) KASSERT(curthr && (curthr != mtx->km_holder)); /* curthr must be valid and it must not be holding the mutex (mtx) already */

        (c) In kmutex_unlock():
            (1 pts) (precondition) KASSERT(curthr && (curthr == mtx->km_holder)); /* curthr must be valid and it must currently holding the mutex (mtx) */
            (1 pts) (postcondition) KASSERT(curthr != mtx->km_holder); /* on return, curthr must not be the mutex (mtx) holder */

(B) Kshell : +20 points
        Use DBG=error,test and CS402TESTS=10 in Config.mk for grading.

        Must not restart weenix between tests.
    (1) (4 pts) help
    (2) (4 pts) echo hello world
    (3) (4 pts) echo "hello world"
    (4) (4 pts) help
    (5) (4 pts) exit

        Must NOT run kshell in a separate kernel process.  Kshell commands
        are suppose to be subroutine calls.

(C) Ted Faber's tests (these should be invoked under kshell): +22 points
        Use DBG=error,test and CS402TESTS=10 in Config.mk for grading.

        Test using faber_thread_test() in kernel/proc/faber_test.c.
        Get full credit here if all the printout are correct.  (You need to
            figure out what printout to expect.  For example, look for exit(-1)
            in "faber_test.c".  Your code should never get there!)

        faber_thread_test() must run in a separate kernel process and in the foreground.
        If cannot be invoked under kshell, only half the credit for each test.

        When the prompt is returned, run it again.
        If cannot run twice in a row (i.e., crashes or freezes during a test), deduct 10 points (in addition to other deductions).

        Please note that although there are 9 subtests below, there is really no way to
        run them individually/separately.  You may use CS402TESTS in Config.mk to run upto
        a particular test, but you will not get any of the points for the tests you skip.

    (1) waitpid any test, etc. (4 points)
    (2) context switch test (1 points)
    (3) wake me test, etc. (2 points)
    (4) wake me uncancellable test, etc. (2 points)
    (5) cancel me test, etc. (4 points)
    (6) reparenting test, etc. (2 points)
    (7) show race test, etc. (3 points)
    (8) kill child procs test (2 points)
    (9) proc kill all test (2 points)

        Must not restart weenix to run the next test.

(D) Sung-Han's tests (these should be invoked under kshell): +13 points
        Use DBG=error,test and CS402TESTS=10 in Config.mk for grading.

        Test using kernel/proc/sunghan_test.c.
        Get full credit here if all the printout are correct.  (You need to
            figure out what printout to expect.)
        If cannot be invoked under kshell, only half credit for each test.

    (1) sunghan_test(): producer/consumer test (9 points)
        sunghan_test() must run in a separate kernel process and in the foreground.

        You should see a bunch of kernel debugging messages about "adding nodes"
        and "removing nodes".  Eventually, you should see a kernel debugging
        message saying something like "sunghan_test() terminated".

        When the prompt is returned, run it again.
        If cannot run twice in a row (i.e., crashes or freezes during a test), deduct 4 points (in addition to other deductions).

        Must not restart weenix to run the next test.

    (2) sunghan_deadlock_test(): deadlock test (4 points)
        sunghan_deadlock_test() must run in a separate kernel process and in the foreground.

        Deadlock should occur.  This checks the mutex and the waiting queue of
        process/thread.  If deadlock occurs, the OS should freeze soon (i.e., you
        should not be able to enter commands into kshell and you should not be
        able to see "weenix: halted cleanly!") and you shouldn't see other errors.
        (If you type on the keyboard, you should see the keys you pressed echo
        back in the console because echoing is done in the interrupt handler.)

(E) SELF-checks : +10 points
        Use DBG=error,print,test and CS402TESTS=10 in Config.mk for grading.

        Every code sequence must be tested.  It can either be tested when you run any
        of the above tests or you can use additional tests to demonstrate it (and
        document it in section (E) of the submitted README file regarding what
        test to run).  In either case, you must use a correctly labeled dbg()
        call to demonstrate that every code sequence can be exercised.

        For every untested code sequence, take 1 point off. Take 0.5 point off if it
        is not clear what test to run to exercise it.  Please note that such
        "conforming dbg() call" is required at the END of every code sequence as specified
        in the spec.  You will not get credit for putting such information in a code comment.

        You must use a correctly formatted "conforming dbg() calls".  Take 1 point off
        for each incorrectly formatted or mis-labeled "conforming dbg() calls".
        You must use a correctly formatted "conforming dbg() calls".  These are the
        choices:
                use dbg(DBG_PRINT, "(GRADING1A)\n") to mean simply starting and stopping the kernel, if applicable
                use dbg(DBG_PRINT, "(GRADING1B X)\n") where X is a number between 1 and 5, if applicable
                use dbg(DBG_PRINT, "(GRADING1C)\n"), if applicable
                use dbg(DBG_PRINT, "(GRADING1D X)\n") where X is a number between 1 and 2, if applicable
                use dbg(DBG_PRINT, "(GRADING1E X)\n") where X is an extra test you have written for the purpose of SELF-checks, if applicable
            NOTE: "if applicable" means that if you have a separate command to run part of the subtests, you need to include subtest or subtest.item information
            NOTE: must not use dbg_print()
            NOTE: must use notation to include a subtest number if a separate command must be used to run a subtest
            NOTE: -1 pt for each instance of including extra information in a conforming dbg() call
            NOTE: -0.5 pt for not using "\n" in a conforming dbg() call
 

+---------------+
| Minus points: |
+---------------+

If a range is specified, it means that even if it only happens once, the grader must apply the minimum deduction.

Missing/incomplete required section(s) in README file (procs-README.txt): -5 points (even if lots of comments in code)
                      deduct 0.5 point each for every missing/incomplete item in README

Submission in wrong file format : -2 points

Submitted binary file : -2 points

Submitted extra file : -2 points

Wrong file location in submission : -2 points if files are not in correct directory
                      if the submission does not preserve the directory structure,
                          take 2 points off

Altered or removed top comment block in a .c file : -20 points for each such file

Altered or removed SIGNATURE : -20 points

Extra printout when running with DBG=error,test in Config.mk: -5 points
                      if you have debugging printout for yourself, you should use DBG_TEMP so it can be turned off in Config.mk

Cannot compile      : -5 to -10, depending on effort to make it work
                      if cannot generate executable, at least 5 points
                          will be taken off, up to 10 points off if it
                          takes a lot to make it work
                      this assumes that there is a way to compile your
                          program, if not, you probably wouldn't have
                          earned any "plus points" anyway

Compiler warnings   : -1 to -3 points
                      take 1 point off for 1-4 warnings, 2 points off
                          for 5-8 warnings, 3 points for more
                      if you disabled compiler warnings, we will take
                          20 points off

"make clean"        : -2 points if cannot delete all binary files created during compilation
                      (.o files, .gch files, executable files, etc.)

Kernel panic when running tests : -5 to -10 points
                      if kernel panic just once, deduct 5 points,
                          for each additional occurrance, deduct 1 pt

Kernel freezes when running tests : -5 to -10 points
                      if kernel freezes just once, deduct 5 points,
                          for each additional occurrance, deduct 1 pt

Cannot halt kernel cleanly when shutting down (not due to panic or freeze) : -5 to -10 points
                      if failed to see the "weenix: halted cleanly" message
                          just once, deduct 5 points, for each additional
                          occurrance, deduct 1 pt

